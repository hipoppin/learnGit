解构赋值	ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值

基本用法	let [a, b, c] = [1, 2, 3]; //数组的结构赋值
			本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。
			下面是一些使用嵌套数组进行解构的例子。
			let [foo, [[bar], baz]] = [1, [[2], 3]];
			foo // 1
			bar // 2
			baz // 3

			let [ , , third] = ["foo", "bar", "baz"];
			third // "baz"

			let [x, , y] = [1, 2, 3];
			x // 1
			y // 3

			let [head, ...tail] = [1, 2, 3, 4];
			head // 1
			tail // [2, 3, 4]

			let [x, y, ...z] = ['a'];
			x // "a"
			y // undefined 如果解构不成功，变量的值就等于undefined。
			z // []
			
			另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。
			let [x, y] = [1, 2, 3];
			x // 1
			y // 2

			let [a, [b], d] = [1, [2, 3], 4];
			a // 1
			b // 2
			d // 4
			
			如果等号的右边不是数组（或者严格地说，不是可遍历的结构），那么将会报错。
			// 报错
			let [foo] = 1;
			let [foo] = false;
			let [foo] = NaN;
			let [foo] = undefined;
			let [foo] = null;
			let [foo] = {};
			
默认值		解构赋值允许指定默认值。
			let [foo = true] = [];
			foo // true

			let [x, y = 'b'] = ['a']; // x='a', y='b'
			
			ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。
			例：
				let [x = 1] = [undefined];
				x // 1

				let [x = 1] = [null];
				x // null
				
			如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。
			function f() {
			  console.log('aaa');
			}
			let [x = f()] = [1];
			上面代码中，因为x能取到值，所以函数f根本不会执行。
			

对象的解构赋值		解构不仅可以用于数组，还可以用于对象。
					对象的解构与数组有一个重要的不同:
						数组的元素是按次序排列的，变量的取值由它的位置决定；
						而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。
						例：
							let { bar, foo } = { foo: 'aaa', bar: 'bbb' };
							foo // "aaa"
							bar // "bbb"

							let { baz } = { foo: 'aaa', bar: 'bbb' };
							baz // undefined  如果解构失败，变量的值等于undefined。
						
					对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。
					例：	
						const { log } = console;  ==>  const { log } = { log: console.log };
						log('hello') // hello
						
					对象的解构赋值完整写法
						let { foo: foo, bar: bar } = { foo: 'aaa', bar: 'bbb' }; ==> let { foo, bar} = { foo: 'aaa', bar: 'bbb' };
						
						let { foo: baz } = { foo: 'aaa', bar: 'bbb' };
						baz // "aaa"
						
						let obj = { first: 'hello', last: 'world' };
						let { first: f, last: l } = obj;
						f // 'hello'
						l // 'world'

					也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。
					真正被赋值的是后者，而不是前者。如下：
						let { foo: baz } = { foo: 'aaa', bar: 'bbb' };
						baz // "aaa"
						foo // error: foo is not defined
						
默认值		对象的解构也可以指定默认值
			var {x, y = 5} = {x: 1};
			x // 1
			y // 5
			
			默认值生效的条件是，对象的属性值严格等于undefined。
			var {x = 3} = {x: undefined};
			x // 3

			var {x = 3} = {x: null};
			x // null
			
			注意点：由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。
					let arr = [1, 2, 3];
					let {0 : first, [2] : last} = arr;
					first // 1
					last // 3
					

字符串的解构赋值	字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。
					const [a, b, c, d, e] = 'hello';
					a // "h"
					b // "e"
					c // "l"
					d // "l"
					e // "o"
					
					类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。
					let {length : len} = 'hello';
					len // 5
					

数值和布尔值的解构赋值		解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。
							let {toString: s} = 123;
							s === Number.prototype.toString // true

							let {toString: s} = true;
							s === Boolean.prototype.toString // true
							
							解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。
							由于undefined和null无法转为对象，所以对它们进行解构赋值，都会报错。
							let { prop: x } = undefined; // TypeError
							let { prop: y } = null; // TypeError
			
					
						
			
			
		