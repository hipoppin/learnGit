函数参数的默认值（有默认值的尾部参数可以省略）

	ES6 允许为函数的参数设置默认值，即直接写在参数定义的后面。
		function log(x, y = 'World') {
		  console.log(x, y);
		}
		log('Hello') // Hello World
		log('Hello', 'China') // Hello China
		log('Hello', '') // Hello
		
	参数变量是默认声明的，所以不能用let或const再次声明。
		function foo(x = 5) {
		  let x = 1; // error
		  const x = 2; // error
		}
		
	使用参数默认值时，函数不能有同名参数。
		// 不报错
		function foo(x, x, y) {
		  // ...
		}

		// 报错
		function foo(x, x, y = 1) {
		  // ...
		}
		// SyntaxError: Duplicate parameter name not allowed in this context
		
	参数默认值不是传值的，而是每次都重新计算默认值表达式的值。也就是说，参数默认值是惰性求值的。
	（表达式不在它被绑定到变量之后就立即求值，而是在该值被使用的时候求值）
		let x = 99;
		function foo(p = x + 1) {
		  console.log(p);
		}

		foo() // 100

		x = 100;
		foo() // 101
		
		
与解构赋值默认值结合使用

	function fetch(url, { body = '', method = 'GET', headers = {} } = {}) {
	  console.log(method);
	}

	fetch('http://example.com')
	// "GET"
	上面代码中，函数fetch没有第二个参数时，函数参数的默认值就会生效，然后才是解构赋值的默认值生效，变量method才会取到默认值GET。
	
	
参数默认值的位置

	通常情况下，定义了默认值的参数，应该是函数的尾参数。
	因为这样比较容易看出来，到底省略了哪些参数。
	如果非尾部的参数设置默认值，实际上这个参数是没法省略的。
		// 例一
		function f(x = 1, y) {
		  return [x, y];
		}

		f() // [1, undefined]
		f(2) // [2, undefined])
		f(, 1) // 报错
		f(undefined, 1) // [1, 1]

		// 例二
		function f(x, y = 5, z) {
		  return [x, y, z];
		}

		f() // [undefined, 5, undefined]
		f(1) // [1, 5, undefined]
		f(1, ,2) // 报错
		f(1, undefined, null) // [1, 5, null]
		
		
函数的 length 属性

	指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。
	
	也就是说，指定了默认值后，length属性将失真。
		(function (a) {}).length // 1
		(function (a = 5) {}).length // 0
		(function (a, b, c = 5) {}).length // 2
		
	如果设置了默认值的参数不是尾参数，那么length属性也不再计入后面的参数了。
		（类似于最少需要传递参数个数）
		(function (a = 0, b, c) {}).length // 0
		(function (a, b = 1, c) {}).length // 1
	
	
rest 参数

	ES6 引入 rest 参数（形式为...变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。
	
	rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。
		function add(...values) {
		  let sum = 0;

		  for (var val of values) {
			sum += val;
		  }

		  return sum;
		}
		add(2, 5, 3) // 10

	
严格模式

	从 ES5 开始，函数内部可以设定为严格模式。

	ES2016 做了一点修改，规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式，否则会报错。
	
	
name 属性

	函数的name属性，返回该函数的函数名
		function foo() {}
		foo.name // "foo"
		
	需要注意的是，ES6 对这个属性的行为做出了一些修改。
	
	如果将一个匿名函数赋值给一个变量，ES5 的name属性，会返回空字符串，而 ES6 的name属性会返回实际的函数名。
		var f = function () {};
		// ES5
		f.name // ""

		// ES6
		f.name // "f"
		
	
箭头函数 *****

	ES6 允许使用“箭头”（=>）定义函数。
		var f = v => v;
		
		// 等同于
		var f = function (v) {
		  return v;
		};
		
	如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。
		var f = () => 5;
		// 等同于
		var f = function () { return 5 };

		var sum = (num1, num2) => num1 + num2;
		// 等同于
		var sum = function(num1, num2) {
		  return num1 + num2;
		};
		
	如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。
		var sum = (num1, num2) => { return num1 + num2; }
		
	由于{}大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上括号()，否则会报错。
		// 报错
		let getTempItem = id => { id: id, name: "Temp" };

		// 不报错
		let getTempItem = id => ({ id: id, name: "Temp" });
		
	箭头函数可以与变量解构结合使用。
		const full = ({ first, last }) => first + ' ' + last;

		// 等同于
		function full(person) {
		  return person.first + ' ' + person.last;
		}
		
	
箭头函数有几个使用注意点。
		
	（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。
	
	（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
	
	（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。
	
	（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。
	
	