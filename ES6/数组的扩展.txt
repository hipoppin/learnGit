扩展运算符

	扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。
		console.log(...[1, 2, 3])
		// 1 2 3

		console.log(1, ...[2, 3, 4], 5)
		// 1 2 3 4 5
	
	该运算符主要用于函数调用。
		function push(array, ...items) {
		  array.push(...items);
		  return array;
		}
		push([0], ...[1,2,3]) // [0,1,2,3]

		function add(x, y) {
		  return x + y;
		}
		add(...[4, 38]) // 42
		
	扩展运算符后面还可以放置表达式。
		const arr = [ ...(1 > 0 ? ['a'] : []), 'b' ]; // ['a', 'b']
		
	如果扩展运算符后面是一个空数组，则不产生任何效果。
		[...[], 1] 
		// [1]
		
	注意，扩展运算符如果放在括号中，JavaScript 引擎就会认为这是函数调用。如果这时不是函数调用，就会报错。
		(...[1, 2])
		// Uncaught SyntaxError: Unexpected number

		console.log((...[1, 2]))
		// Uncaught SyntaxError: Unexpected number

		console.log(...[1, 2])
		// 1 2
	上面前两种情况都会报错，因为扩展运算符所在的括号不是函数调用，而第三种情况console.log(...[1, 2])就不会报错，因为这时是函数调用。
	
	
扩展运算符的应用

	（1）复制数组
		数组是复合的数据类型，直接复制的话，只是复制了指向底层数据结构的指针，而不是克隆一个全新的数组。
			const a1 = [1, 2];
			const a2 = a1;

			a2[0] = 2;
			a1 // [2, 2] --- 上面代码中，a2并不是a1的克隆，而是指向同一份数据的另一个指针。修改a2，会直接导致a1的变化。
			
		扩展运算符提供了复制数组的简便写法	
			const a1 = [1, 2];
			// 写法一
			const a2 = [...a1];
			// 写法二
			const [...a2] = a1;
			
	（2）合并数组	
			const arr1 = ['a', 'b'];
			const arr2 = ['c'];
			const arr3 = ['d', 'e'];

			// ES5 的合并数组
			arr1.concat(arr2, arr3);	// [ 'a', 'b', 'c', 'd', 'e' ]
			
			// ES6 的合并数组
			[...arr1, ...arr2, ...arr3]	   // [ 'a', 'b', 'c', 'd', 'e' ]
			
	（3）与解构赋值结合
		扩展运算符可以与解构赋值结合起来，用于生成数组。
			const [first, ...rest] = [1, 2, 3, 4, 5];
			first // 1
			rest  // [2, 3, 4, 5]

			const [first, ...rest] = [];
			first // undefined
			rest  // []

			const [first, ...rest] = ["foo"];
			first  // "foo"
			rest   // []
			
	注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。
			const [...butLast, last] = [1, 2, 3, 4, 5];
			// 报错

			const [first, ...middle, last] = [1, 2, 3, 4, 5];
			// 报错
			
			
字符串

	扩展运算符还可以将字符串转为真正的数组。
		[...'hello']
		// [ "h", "e", "l", "l", "o" ]
		
	
	
Array.from()	//对象转数组

	用于将两类对象转为真正的数组：
		类似数组的对象（array-like object）；
		可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。
		
		例1
			let arrayLike = {
				'0': 'a',
				'1': 'b',
				'2': 'c',
				length: 3
			};
			// ES5的写法
			var arr1 = [].slice.call(arrayLike); // ['a', 'b', 'c']

			// ES6的写法
			let arr2 = Array.from(arrayLike); // ['a', 'b', 'c']
			
		例2
			Array.from('hello')
			// ['h', 'e', 'l', 'l', 'o']

			let namesSet = new Set(['a', 'b'])
			Array.from(namesSet) // ['a', 'b']
	
	如果参数是一个真正的数组，Array.from会返回一个一模一样的新数组。
		Array.from([1, 2, 3])
		// [1, 2, 3]
		
	Array.from还可以接受第二个参数，作用类似于数组的map方法，用来对每个元素进行处理，将处理后的值放入返回的数组。
		Array.from(arrayLike, x => x * x);
		// 等同于
		Array.from(arrayLike).map(x => x * x);

		Array.from([1, 2, 3], (x) => x * x)
		// [1, 4, 9]
		
		
Array.of()

	用于将一组值，转换为数组。
		Array.of(3, 11, 8) // [3,11,8]
		Array.of(3) // [3]
		Array.of(3).length // 1
		
	这个方法的主要目的，是弥补数组构造函数Array()的不足。因为参数个数的不同，会导致Array()的行为有差异。
		Array() // []
		Array(3) // [, , ,]
		Array(3, 11, 8) // [3, 11, 8]
		
		Array方法没有参数、一个参数、三个参数时，返回结果都不一样。
		只有当参数个数不少于 2 个时，Array()才会返回由参数组成的新数组。
		参数个数只有一个时，实际上是指定数组的长度。
		Array.of基本上可以用来替代Array()或new Array()，并且不存在由于参数不同而导致的重载。
		
		
copyWithin()
	
	数组实例的copyWithin方法，在当前数组内部，将指定位置的成员复制到其他位置（会覆盖原有成员），然后返回当前数组。
	也就是说，使用这个方法，会修改当前数组。
		Array.prototype.copyWithin(target, start = 0, end = this.length)
			target（必需）：从该位置开始替换数据。如果为负值，表示倒数。
			start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。
			end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。
			
		这三个参数都应该是数值，如果不是，会自动转为数值。
			// 将3号位复制到0号位
			[1, 2, 3, 4, 5].copyWithin(0, 3, 4)
			// [4, 2, 3, 4, 5]

			// -2相当于3号位，-1相当于4号位
			[1, 2, 3, 4, 5].copyWithin(0, -2, -1)
			// [4, 2, 3, 4, 5]
		
		
find() 和 findIndex()

	find方法
		用于找出第一个符合条件的数组成员。
		它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。
		如果没有符合条件的成员，则返回undefined。
			例1
				[1, 4, -5, 10].find((n) => n < 0)
				// -5
				
			例2（find方法的回调函数可以接受三个参数，依次为当前的值、索引和原数组。）
				[1, 5, 10, 15].find(function(value, index, arr) {
				  return value > 9;
				}) // 10
		
	findIndex方法	
		用法与find方法非常类似，返回第一个符合条件的数组成员的位置（索引），如果所有成员都不符合条件，则返回-1。
			[1, 5, 10, 15].findIndex(function(value, index, arr) {
			  return value > 9;
			}) // 2
	
	
	这两个方法都可以接受第二个参数，用来绑定回调函数的this对象。
		function f(v){
		  return v > this.age;
		}
		let person = {name: 'John', age: 20};
		[10, 12, 26, 15].find(f, person);    // 26
		上面的代码中，find函数接收了第二个参数person对象，回调函数中的this对象指向person对象。
		
	另外，这两个方法都可以发现（识别）NaN，弥补了数组的indexOf方法的不足。
		[NaN].indexOf(NaN)
		// -1  -- indexOf方法无法识别数组的NaN成员，但是findIndex方法可以借助Object.is方法做到

		[NaN].findIndex(y => Object.is(NaN, y))
		// 0  -- Object.is() 判断两个值是否相同。
		
	
fill()
	
	fill方法使用给定值，填充一个数组。
		['a', 'b', 'c'].fill(7)
		// [7, 7, 7]

		new Array(3).fill(7)
		// [7, 7, 7]
	上面代码表明，fill方法用于空数组的初始化非常方便。数组中已有的元素，会被全部抹去。
	
	fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。
		['a', 'b', 'c'].fill(7, 1, 2)
		// ['a', 7, 'c']
	
	
数组实例的 entries()，keys() 和 values() 	

	ES6 提供三个新的方法——entries()，keys()和values()——用于遍历数组。
	它们都返回一个遍历器对象，可以用for...of循环进行遍历
		keys()是对键名的遍历
		values()是对键值的遍历
		entries()是对键值对的遍历
		
		for (let index of ['a', 'b'].keys()) {
		  console.log(index);
		}
		// 0
		// 1

		for (let elem of ['a', 'b'].values()) {
		  console.log(elem);
		}
		// 'a'
		// 'b'

		for (let [index, elem] of ['a', 'b'].entries()) {
		  console.log(index, elem);
		}
		// 0 "a"
		// 1 "b"
		
	如果不使用for...of循环，可以手动调用遍历器对象的next方法，进行遍历。
		let letter = ['a', 'b', 'c'];
		let entries = letter.entries();
		console.log(entries.next().value); // [0, 'a']
		console.log(entries.next().value); // [1, 'b']
		console.log(entries.next().value); // [2, 'c']
		
	
数组实例的 includes()

	Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。
		[1, 2, 3].includes(2)     // true
		[1, 2, 3].includes(4)     // false
		[1, 2, NaN].includes(NaN) // true
		
	该方法的第二个参数表示搜索的起始位置，默认为0。
	如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始。
	
	
数组实例的 flat()，flatMap()

	Array.prototype.flat()用于将嵌套的数组“拉平”，变成一维的数组。该方法返回一个新数组，对原数据没有影响。
		[1, 2, [3, 4]].flat()
		// [1, 2, 3, 4]
		
	flat()默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将flat()方法的参数写成一个整数，表示想要拉平的层数，默认为1。
		[1, 2, [3, [4, 5]]].flat()
		// [1, 2, 3, [4, 5]]

		[1, 2, [3, [4, 5]]].flat(2)
		// [1, 2, 3, 4, 5]
		
		[1, [2, [3]]].flat(Infinity)
		// [1, 2, 3]
		
	如果原数组有空位，flat()方法会跳过空位。
		[1, 2, , 4, 5].flat()
		// [1, 2, 4, 5]
		
	
	flatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。
	该方法返回一个新数组，不改变原数组。
		// 相当于 [[2, 4], [3, 6], [4, 8]].flat()
		[2, 3, 4].flatMap((x) => [x, x * 2])
		// [2, 4, 3, 6, 4, 8]
		
	flatMap()只能展开一层数组。
	
	flatMap()方法的参数是一个遍历函数，该函数可以接受三个参数（当前数组成员、当前数组成员的位置（从零开始）、原数组）
	
	flatMap()方法还可以有第二个参数，用来绑定遍历函数里面的this。
	

数组的空位
	
	数组的空位指，数组的某一个位置没有任何值。比如，Array构造函数返回的数组都是空位。  
		Array(3) // [, , ,]
		
	ES6 明确将空位转为undefined。

	Array.from方法会将数组的空位，转为undefined，也就是说，这个方法不会忽略空位。
		Array.from(['a',,'b'])
		// [ "a", undefined, "b" ]
		
	扩展运算符（...）也会将空位转为undefined。
		[...['a',,'b']]
		// [ "a", undefined, "b" ]
		
	copyWithin()会连空位一起拷贝。
		[,'a','b',,].copyWithin(2,0) // [,"a",,"a"]
		
	for...of循环也会遍历空位。
	
	entries()、keys()、values()、find()和findIndex()会将空位处理成undefined。
	
	
		
	