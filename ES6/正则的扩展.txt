RegExp 构造函数

	在 ES5 中，RegExp构造函数的参数有两种情况。

	第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。
		var regex = new RegExp('xyz', 'i');
		// 等价于
		var regex = /xyz/i;
		
	第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。
		var regex = new RegExp(/xyz/i); // ES5 不允许此时使用第二个参数添加修饰符，否则会报错。
		// 等价于
		var regex = /xyz/i;
		
	ES6 改变了这种行为。如果RegExp构造函数第一个参数是一个正则对象，那么可以使用第二个参数指定修饰符。
	而且，返回的正则表达式会忽略原有的正则表达式的修饰符，只使用新指定的修饰符。
		new RegExp(/abc/ig, 'i').flags
		// "i"  原有正则对象的修饰符是ig，它会被第二个参数i覆盖。
		
	
字符串的正则方法

	字符串对象共有 4 个方法，可以使用正则表达式：match()、replace()、search()和split()。
	
	ES6 将这 4 个方法，在语言内部全部调用RegExp的实例方法，从而做到所有与正则相关的方法，全都定义在RegExp对象上。
		String.prototype.match 调用 RegExp.prototype[Symbol.match]
		String.prototype.replace 调用 RegExp.prototype[Symbol.replace]
		String.prototype.search 调用 RegExp.prototype[Symbol.search]
		String.prototype.split 调用 RegExp.prototype[Symbol.split]
		
		
RegExp.prototype.flags 属性
	
	ES6 为正则表达式新增了flags属性，会返回正则表达式的修饰符。
		// ES5 的 source 属性
		// 返回正则表达式的正文
			/abc/ig.source
			// "abc"

		// ES6 的 flags 属性
		// 返回正则表达式的修饰符
			/abc/ig.flags
			// 'gi'
			
	
String.prototype.matchAll

	可以一次性取出所有匹配。不过，它返回的是一个遍历器（Iterator），而不是数组。
	
	可以用for...of循环取出。相对于返回数组，返回遍历器的好处在于，如果匹配结果是一个很大的数组，那么遍历器比较节省资源。