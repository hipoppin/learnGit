字符串的遍历器接口

	ES6 为字符串添加了遍历器接口，使得字符串可以被for...of循环遍历。
		for (let item of 'foo') {
		  console.log(item)
		}
		// "f"
		// "o"
		// "o"
		
	
includes(), startsWith(), endsWith()
	
	传统上，JavaScript 只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6 又提供了三种新方法。
		let s = 'Hello world!';
		
		s.includes('o') // true  返回布尔值，表示是否找到了参数字符串。
		s.startsWith('Hello') // true  返回布尔值，表示参数字符串是否在原字符串的头部。
		s.endsWith('!') // true  返回布尔值，表示参数字符串是否在原字符串的尾部。
		
		这三个方法都支持第二个参数，表示开始搜索的位置。
		let s = 'Hello world!';

		s.includes('Hello', 6) // false
		s.startsWith('world', 6) // true
		s.endsWith('Hello', 5) // true
		上面代码表示，使用第二个参数n时，endsWith的行为与其他两个方法有所不同。
		它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。
		

repeat()	

	repeat方法返回一个新字符串，表示将原字符串重复n次。	
		'x'.repeat(3) // "xxx"
		'na'.repeat(0) // ""
		
	参数如果是小数，会被取整。
		'na'.repeat(2.9) // "nana"
		
	如果repeat的参数是负数（小于-1）或者Infinity，会报错。
		'na'.repeat(Infinity)
		// RangeError
		'na'.repeat(-1)
		// RangeError
		
	但是，如果参数是 0 到-1 之间的小数，则等同于 0
		'na'.repeat(-0.9) // ""
		
	参数NaN等同于 0。
		'na'.repeat(NaN) // ""
		
	如果repeat的参数是字符串，则会先转换成数字。
		'na'.repeat('na') // ""
		'na'.repeat('3') // "nanana"
		

padStart()，padEnd()

	ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。
	padStart()用于头部补全，padEnd()用于尾部补全。
	'x'.padStart(5, 'ab') // 'ababx'
	'x'.padStart(4, 'ab') // 'abax'

	'x'.padEnd(5, 'ab') // 'xabab'
	'x'.padEnd(4, 'ab') // 'xaba'
	
	如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。
	'xxx'.padStart(2, 'ab') // 'xxx'
	'xxx'.padEnd(2, 'ab') // 'xxx'
	
	如果省略第二个参数，默认使用空格补全长度。
	'x'.padStart(4) // '   x'
	'x'.padEnd(4) // 'x   '
	
	padStart()的常见用途是为数值补全指定位数，还有提示字符串格式
	'123456'.padStart(10, '0') // "0000123456"
	'09-12'.padStart(10, 'YYYY-MM-DD') // "YYYY-09-12"
	
	
模板字符串

	模板字符串（template string）是增强版的字符串，用反引号（`）标识。
	它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。
		// 普通字符串
		`In JavaScript '\n' is a line-feed.`

		// 多行字符串，所有的空格和缩进都会被保留在输出之中。
		`In JavaScript this is
		 not legal.`

		console.log(`string text line 1
		string text line 2`);

		// 字符串中嵌入变量，需要将变量名写在${}之中。
		let name = "Bob", time = "today";
		`Hello ${name}, how are you ${time}?` 
		
		大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。
		let obj = {x: 1, y: 2};
		`${obj.x + obj.y}`
		// "3"
		
	上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。
		let greeting = `\`Yo\` World!`;
		
	模板字符串之中还能调用函数。
		function fn() {
		  return "Hello World";
		}

		`foo ${fn()} bar`
		// foo Hello World bar
	
	如果大括号中的值不是字符串，将按照一般的规则转为字符串。比如，大括号中是一个对象，将默认调用对象的toString方法。
	
	如果模板字符串中的变量没有声明，将报错。
		// 变量place没有声明
		let msg = `Hello, ${place}`;
		// 报错
		
	由于模板字符串的大括号内部，就是执行 JavaScript 代码，因此如果大括号内部是一个字符串，将会原样输出。
		`Hello ${'World'}`
		// "Hello World"
		
	模板字符串甚至还能嵌套。（模板字符串的变量中嵌入另一个模板字符串）
	
	
标签模板
	
	模板字符串的功能，不仅仅是上面这些。它可以紧跟在一个函数名后面，该函数将被调用来处理这个模板字符串。这被称为“标签模板”功能
		alert`123`
		// 等同于
		alert(123)
		
	标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数。
	
	但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。
		let a = 5;
		let b = 10;

		console.log`Hello ${ a + b } world ${ a * b }`;
		// 等同于
		console.log(['Hello ', ' world ', ''], 15, 50);
		
	
String.raw()

	String.raw方法，往往用来充当模板字符串的处理函数，返回一个斜杠都被转义（即斜杠前面再加一个斜杠）的字符串，对应于替换变量后的模板字符串。
		String.raw`Hi\n${2+3}!`;
		// 返回 "Hi\\n5!"

		String.raw`Hi\u000A!`;
		// 返回 "Hi\\u000A!"
		
	如果原字符串的斜杠已经转义，那么String.raw会进行再次转义。
		String.raw`Hi\\n`
		// 返回 "Hi\\\\n"
		
	String.raw方法可以作为处理模板字符串的基本方法，它会将所有变量替换，而且对斜杠进行转义，方便下一步作为字符串来使用。

	String.raw方法也可以作为正常的函数使用。这时，它的第一个参数，应该是一个具有raw属性的对象，且raw属性的值应该是一个数组。
		String.raw({ raw: 'test' }, 0, 1, 2);
		// 't0e1s2t'

		// 等同于
		String.raw({ raw: ['t','e','s','t'] }, 0, 1, 2);